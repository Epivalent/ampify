#! /usr/bin/env python2.5

# Released into the Public Domain by tav <tav@espians.com>

"""
Usage: appengine <command> [options]

Available commands:

   run [dev_appserver.py options]

   prod [dev_appserver.py options]

   deploy [appcfg.py options]
"""

import sys

# ------------------------------------------------------------------------------
# exit if not python 2.5
# ------------------------------------------------------------------------------

if sys.version[:3] != '2.5':
    print "\n!! App Engine needs Python 2.5\n"
    sys.exit(1)

# ------------------------------------------------------------------------------
# imports
# ------------------------------------------------------------------------------

import subprocess

from cStringIO import StringIO
from os import chdir, getcwd, mkdir
from os.path import abspath, dirname, exists, join as join_path
from shutil import rmtree
from time import time
from urllib import urlopen
from zipfile import ZipFile

# ------------------------------------------------------------------------------
# konfig
# ------------------------------------------------------------------------------

APP_DIRECTORY = 'appengine'
APP_PACKAGE = 'ampify'
RESOURCE_DIRECTORY = 'jsamp'
RESOURCE_BUILD_COMMAND = ['make', 'jsamp']
SDK_VERSION = "1.3.0"

# ------------------------------------------------------------------------------
# some konstants
# ------------------------------------------------------------------------------

SCRIPT_ROOT = dirname(abspath(__file__))
MAIN_ROOT = dirname(SCRIPT_ROOT)
APP_ROOT = join_path(MAIN_ROOT, APP_DIRECTORY)
RESOURCE_ROOT = join_path(MAIN_ROOT, RESOURCE_DIRECTORY)
UPDATED_FILE_PATH = join_path(APP_ROOT, APP_PACKAGE, 'updated.py')

SDK_FILE = "google_appengine_%s.zip" % SDK_VERSION
SDK_PATH = "http://googleappengine.googlecode.com/files/" + SDK_FILE

OUR_SDK_PATH = join_path(MAIN_ROOT, '.appengine_python_sdk')
OUR_SDK_VERSION_FILE = join_path(OUR_SDK_PATH, 'VERSION')

# ------------------------------------------------------------------------------
# chek for app engine sdk
# ------------------------------------------------------------------------------

sdk_exists = None

if exists(OUR_SDK_VERSION_FILE):
    sdk_version = open(OUR_SDK_VERSION_FILE, 'rb').readline().split()
    sdk_version = sdk_version and sdk_version[-1] or ''
    if sdk_version == '"%s"' % SDK_VERSION:
        sdk_exists = True
    else:
        sdk_exists = False

if not sdk_exists:

    if sdk_exists is False:
        print
        print "# Removing Existing App Engine SDK %s" % sdk_version
        rmtree(OUR_SDK_PATH)

    error = None

    print
    print "# Downloading App Engine SDK..."

    try:
        sdk_file = StringIO(urlopen(SDK_PATH).read())
    except Exception, error:
        print
        print "!! Couldn't Download the SDK: %r" % error

    try:
        mkdir(OUR_SDK_PATH, 0777)
        sdk_zip = ZipFile(sdk_file)
        for name in sdk_zip.namelist():
            newname = name[17:]
            if not newname:
                continue
            if name.endswith('/'):
                mkdir(join_path(OUR_SDK_PATH, newname))
            else:
                newfile = open(join_path(OUR_SDK_PATH, newname), 'wb')
                newfile.write(sdk_zip.read(name))
                newfile.close()
    except Exception, error:
        print
        print "!! Couldn't Extract the SDK: %r" % error

    print

    if error:
        sys.exit(1)
    else:
        print "# App Engine SDK %s Successfully Installed." % SDK_VERSION
        print 

if __name__ == '__main__':

    argv = sys.argv[1:]

    if not argv:
        print __doc__
        sys.exit()

    command = argv[0]
    argv = argv[1:]

    if command in ['--help', '-h', 'help']:
        print __doc__
        sys.exit()

    if command == 'run':

        if not argv:
            argv = [APP_ROOT]

        subprocess.call(
            [sys.executable, join_path(OUR_SDK_PATH, 'dev_appserver.py')] + argv
        )

        sys.exit()

    if command == 'prod':

        env = {'PYTHONPATH': join_path(APP_ROOT, APP_PACKAGE, 'inject')}

        if not argv:
            argv = [APP_ROOT]

        subprocess.call(
            [sys.executable, join_path(OUR_SDK_PATH, 'dev_appserver.py')] + argv,
            env=env
        )

        sys.exit()

    if command == 'deploy':

        if not argv:
            argv = ['-v', 'update', APP_ROOT]
            cur_dir = getcwd()
            chdir(RESOURCE_ROOT)
            subprocess.call(RESOURCE_BUILD_COMMAND)
            chdir(cur_dir)
            updated_file = open(UPDATED_FILE_PATH, 'wb')
            updated_file.write("APPLICATION_TIMESTAMP = %s\n" % time())
            updated_file.close()

        subprocess.call(
            [sys.executable, join_path(OUR_SDK_PATH, 'appcfg.py')] + argv
        )

        sys.exit()

    print
    print "!! Unknown command: %s" % command
    print

# Local SDK Admin URLs:

# http://localhost:8080/_ah/login
# http://localhost:8080/_ah/admin
